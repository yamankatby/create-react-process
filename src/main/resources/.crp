// @crp-view-file
import React from 'react';

interface Props {}

const $ProcessName$ = (props: Props) => {
	return <h4>Hi, $ProcessName$ Component!</h4>;
};

export default $ProcessName$;

// @crp-types-file
import { AppAction, AppResultAction } from '../../../config/types';

export enum ActionTypes {
}

export type Action =
	& AppAction
	& AppResultAction;

export interface State {

}

// @crp-reducers-file
import { Reducer } from 'redux';
import { Action, State } from './types';

const initialState: State = {

};

const $processName$: Reducer<State, Action> = (state = initialState, action) => {
	switch (action.type) {
		default:
			return state;
	}
};

export default $processName$;

// @crp-sagas-file
export default [];

// @crp-action-type
$action_name$ = '$PROCESS_NAME$__$ACTION_NAME$',

// @crp-action-interface
export interface $ActionName$Action extends $BaseActionInterface {
	type: ActionTypes.$action_name$;
	$ActionParams
}

// @crp-action-interface-link
& $ActionInterface

// @crp-action
import { ActionTypes } from './types';
export const $actionName$ = ($ActionParamsWithTypes): $ActionInterface => ({
	type: ActionTypes.$action_name$,
	$ActionParams
});

// @crp-reducer
import { ActionTypes } from './types';
case ActionTypes.$action_name$:
	        return {
		        ...state,
	        };

// @crp-saga
function* $actionName$Saga(action: $ActionInterface) {
	const { $params } = action;
	try {

	} catch (e) {

	}
}

// @crp-saga-request
import { call } from 'redux-saga/effects';
import { $actionName$API } from './apis';
        yield call($actionName$API);

// @crp-saga-link
import { takeLatest } from 'redux-saga/effects';
import { ActionTypes } from './types';
    takeLatest(ActionTypes.$action_name$, $actionName$Saga),

// @crp-api
import axios, { AxiosRequestConfig } from 'axios';
export const $actionName$API = async () => {
	const options: AxiosRequestConfig = {
		method: 'GET',
	};
	const response = await axios(options);
	return response.data;
};

